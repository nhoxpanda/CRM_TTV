@model CRM_TTV.tbCategory
<div class="modal-dialog modal-lg">
    <div class="modal-content">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-hidden="true"></button>
            <h4 class="modal-title">Edit</h4>
        </div>
        <div class="modal-body">
            <div class="form-horizontal">
                <div class="row">
                    <div class="col-md-12">
                        @*<button class="btn green fileContainer">
                                <i class="fa fa-file-excel-o"></i>&nbsp;Excel
                                <input type="file" name="Export" class="form-control" />
                            </button>*@
                        @*<select class="form-control" style="width: 150px; display: inline; padding-top: 4px;">
                                <option>Sheet 1</option>
                                <option>Sheet 2</option>
                                <option>Sheet 3</option>
                            </select>*@
                        @*<button class="btn yellow"><i class="fa fa-floppy-o"></i>&nbsp;@Html.ActionLink("Edit", "Edit", new { id = Model.idCategory })</button>*@

                        <button class="btn yellow"><i class="fa fa-floppy-o"></i>&nbsp;Lưu</button>
                        <button class="btn grey" data-dismiss="modal"><i class="fa fa-ban"></i>&nbsp;Đóng</button>
                    </div>
                    <div class="col-md-12 margintop10">
                        <div class="table-responsive table-custom-format">
                            @using (Html.BeginForm(null, null, FormMethod.Post, new { id = "form1" }))
                            {
                                @Html.AntiForgeryToken()

                                <div class="form-horizontal">
                                    <h4>tbCategory</h4>
                                    <hr />
                                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.idCategoryType, "idCategoryType", htmlAttributes: new { @class = "control-label col-md-3" })
                                        <div class="col-md-9">
                                            @Html.DropDownList("idCategoryType", null, htmlAttributes: new { @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.idCategoryType, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.name, htmlAttributes: new { @class = "control-label col-md-3" })
                                        <div class="col-md-9">
                                            @Html.EditorFor(model => model.name, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.name, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.sort, htmlAttributes: new { @class = "control-label col-md-3" })
                                        <div class="col-md-9">
                                            @Html.EditorFor(model => model.sort, new { htmlAttributes = new { @class = "form-control", @Value = "9999" } })
                                            @Html.ValidationMessageFor(model => model.sort, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    
                                </div>
                            }
                            @using (Html.BeginForm(null, null, FormMethod.Post, new { id = "form2" }))
                            {
                                <div class="form-group">
                                    <div class="col-md-2">Ngày dạy</div>
                                    <div class="col-md-9">
                                        <label><input type="checkbox" name="DateOfWeek" value="2">Thứ 2</label>
                                        <label><input type="checkbox" name="DateOfWeek" value="3">Thứ 3</label>
                                        <label><input type="checkbox" name="DateOfWeek" value="4">Thứ 4</label>
                                        <label><input type="checkbox" name="DateOfWeek" value="5">Thứ 5</label>
                                        <label><input type="checkbox" name="DateOfWeek" value="6">Thứ 6</label>
                                        <label><input type="checkbox" name="DateOfWeek" value="7">Thứ 7</label>
                                        <label><input type="checkbox" name="DateOfWeek" value="0">Chủ nhật</label>
                                    </div>
                                </div>
                            }

                            @*<div>
                                    @Html.ActionLink("Back to List", "Index")
                                </div>*@





                            @using (Html.BeginForm(null, null, FormMethod.Post, new { id = "form3" }))
                            {
                                <div class="panel panel-default">
                                    <div class="panel-body">

                                        <div id="education_fields">

                                            <div class="input-group-btn">
                                                <button class="btn btn-success" type="button" onclick="education_fields();"> <span class="glyphicon glyphicon-plus" aria-hidden="true"></span> </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                            <div class="form-group">
                                <div class="col-md-offset-2 col-md-10">
                                    <button class="btn yellow" controller="tbCategories" action="Create" value="tbCategory" id="submit" ><i class="fa fa-floppy-o"></i>&nbsp;Lưu</button>
                                </div>
                            </div>





                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- /.modal-content -->
    </div>
    <!-- /.modal-dialog -->
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @*https://github.com/raphaelm22/jquery.serializeToJSON*@
    <script src="~/Scripts/jquery.serializejson.js"></script>
    <script src="~/Scripts/jquery.serializeToJSON.js"></script>

    @*<script>*@

        //chay dc
        //var data1 = $('#form1').serializeToJSON({ associativeArrays: false });
        //var data2 = JSON.stringify($("#form2").serializeArray());
        //Create(tbCategory tbCategory, string v2)

        //var data1 = $('#form1').serializeToJSON({ associativeArrays: false });
        //var data2 = $("#form2").serializeArray();
        //Create(tbCategory tbCategory, List<RootObject> v2)

        @*$('#submit').click(function () {
            alert('dsadsa');
            //var data1 = $("#form1,#form2").serialize();
            var data1 = $('#form1').serializeToJSON({ associativeArrays: false });
            var data2 = $("#form2").serializeArray();

            var data3 = JSON.stringify($("#form3").serializeObject());
            //data2 = JSON.stringify($("#form2").serializeArray());
            //var data1 = $('#form1').serializeToJSON({ associativeArrays: false });
            //var data2 = $("#form2").serializeObject();
            console.log(data1);
            console.log(data2);
            console.log(data3);
            $.ajax({
                type: 'POST',
                url: "/" + $(this).attr('controller') + "/Create/",
                data: {
                    tbCategory: data1,
                    v2: data2
                },

                success: function (data) {
                    console.log(data);
                    $('#message').html(data);
                },
                error: function (data) {
                    console.log(data);
                }
            });
        });





        var room = -1;
        var roomTime = 0;
        function education_fields() {
            room++;

            var objTo = document.getElementById('education_fields')
            var divtest = document.createElement("div");
            divtest.setAttribute("class", "removeclass" + room);
            divtest.setAttribute("id", "timeGroup" + room);
            var rdiv = 'removeclass' + room;
            divtest.innerHTML = '<div class="form-group"> <label class="control-label col-md-2" for="idCategoryType">idCategoryType</label> <div class="col-md-9"> <select class="form-control valid" id="idCategoryType" name="TimeStudy[' + room + '][date]"><option value="1">CN</option> <option value="2">T2</option> </select> </div>  <button class="btn btn-danger" type="button" onclick="remove_education_fields(' + room + ')">-</button></div><div class="form-group" id="class' + roomTime + '"><label class="control-label col-md-3">Thời gian học</label><div class="col-md-9"> <input class="form-control text-box single-line" id="name" name="TimeStudy[' + room + '][time][' + roomTime + ']" type="text" value=""> </div> <button class="btn btn-success" type="button" onclick="time_fields(' + roomTime + ')">+</button> </div>';
            objTo.appendChild(divtest);
        }

        function time_fields(classID) {
            roomTime++;
            var objTo = document.getElementById('timeGroup' + room)
            var divtest = document.createElement("div");
            divtest.setAttribute("class", "form-group removeTime" + roomTime);
            var rdiv = 'removeTime' + roomTime;
            divtest.innerHTML = '<label class="control-label col-md-3"></label><div class="col-md-9"><input class="form-control text-box single-line" id="name" name="TimeStudy[' + room + '][time][' + roomTime + ']" type="text" value=""></input></div><button class="btn btn-danger" type="button" onclick="remove_time_fields(' + roomTime + ')">-</button>';
            objTo.appendChild(divtest);
        }

        function remove_education_fields(rid) {
            $('.removeclass' + rid).remove();
        }

        function remove_time_fields(rid) {
            $('.removeTime' + rid).remove();
        }


        (function ($) {
            $.fn.serializeObject = function () {

                var self = this,
                    json = {},
                    push_counters = {},
                    patterns = {
                        "validate": /^[a-zA-Z][a-zA-Z0-9_]*(?:\[(?:\d*|[a-zA-Z0-9_]+)\])*$/,
                        "key": /[a-zA-Z0-9_]+|(?=\[\])/g,
                        "push": /^$/,
                        "fixed": /^\d+$/,
                        "named": /^[a-zA-Z0-9_]+$/
                    };


                this.build = function (base, key, value) {
                    base[key] = value;
                    return base;
                };

                this.push_counter = function (key) {
                    if (push_counters[key] === undefined) {
                        push_counters[key] = 0;
                    }
                    return push_counters[key]++;
                };

                $.each($(this).serializeArray(), function () {

                    // skip invalid keys
                    if (!patterns.validate.test(this.name)) {
                        return;
                    }

                    var k,
                        keys = this.name.match(patterns.key),
                        merge = this.value,
                        reverse_key = this.name;

                    while ((k = keys.pop()) !== undefined) {

                        // adjust reverse_key
                        reverse_key = reverse_key.replace(new RegExp("\\[" + k + "\\]$"), '');

                        // push
                        if (k.match(patterns.push)) {
                            merge = self.build([], self.push_counter(reverse_key), merge);
                        }

                            // fixed
                        else if (k.match(patterns.fixed)) {
                            merge = self.build([], k, merge);
                        }

                            // named
                        else if (k.match(patterns.named)) {
                            merge = self.build({}, k, merge);
                        }
                    }

                    json = $.extend(true, json, merge);
                });

                return json;
            };
        })(jQuery);

    </script>*@
}
