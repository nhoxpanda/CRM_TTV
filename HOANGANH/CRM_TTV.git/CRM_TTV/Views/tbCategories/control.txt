using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Threading.Tasks;
using System.Net;
using System.Web;
using System.Web.Mvc;
using CRM_TTV;
using CRM_TTV.Search;
using CRM_TTV.Models;

namespace CRM_TTV.Controllers
{
    public class tbCategoriesController : Controller
    {
        private CRM_TTVEntities db = new CRM_TTVEntities();

        // GET: tbCategories/{int: size}/{int:page}
        //public async Task<ActionResult> Index()
        //{
        //    return View();
        //}


        public async Task<ActionResult> Index(Int32? size = 10, Int32? page = 0)
        {
            if (TempData["search"] != null)
            {
                IEnumerable<object> search = TempData.ContainsKey("search") ? TempData["search"] as IEnumerable<tbCategory> : null;
                ViewBag.rows = search.Count();
                ViewBag.size = (Int32)size;
                TempData["speaker"] = new speaker { type = 2, title = "Thành công...!!!", content = "Đã tìm thấy "+ search.Count() + " dòng dữ liệu...!!!" };
                return View(search);
            }
            //.OrderBy("Foo ascending");
            //.OrderBy("Foo asc");
            //.AsEnumerable()
            //.OrderBy(i => i.GetType().GetProperty(colName).GetValue(i, null))
            int take = (Int32)size;
            int skip = (Int32)page * take;
            var tbCategories = db.tbCategories.OrderByDescending(x => x.idCategory).Skip(skip).Take(take).Include(t => t.tbCategoryType);
            ViewBag.rows = db.tbCategories.Count();
            ViewBag.size = (Int32)size;
            return View(await tbCategories.ToListAsync());
            //return PartialView(await tbCategories.ToListAsync());
        }

        [HttpPost]
        public async Task<ActionResult> Search(tbCategorySearchModel searchModel, string Col, int DESC, Int32? size = 10, Int32? page = 0)
        {
            int take = (Int32)size;
            int skip = (Int32)page * take;
            tbCategorySearch search = new tbCategorySearch();
            var tbCategories = search.Filter(searchModel);
            ViewBag.rows = tbCategories.Count();
            ViewBag.size = (Int32)size;
            TempData["search"] = tbCategories;
            //return View("Index",tbCategories);
            return View("Index", await tbCategories.ToListAsync());
        }

        // GET: tbCategories/Details/5
        public async Task<ActionResult> Details(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            tbCategory tbCategory = await db.tbCategories.FindAsync(id);
            if (tbCategory == null)
            {
                return HttpNotFound();
            }
            return PartialView("View", tbCategory);
        }

        // GET: tbCategories/Create
        public ActionResult Create()
        {
            ViewBag.idCategoryType = new SelectList(db.tbCategoryTypes, "idCategoryType", "name");
            return PartialView();
        }

        // POST: tbCategories/Create
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        // more details see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<ActionResult> Create([Bind(Include = "idCategory,idCategoryType,name,sort")] tbCategory tbCategory)
        {
            if (ModelState.IsValid)
            {
                db.tbCategories.Add(tbCategory);
                await db.SaveChangesAsync();
                TempData["speaker"] = new speaker { type = 1, title = "Success!", content = "Thành công...!!!" };
                return RedirectToAction("Index");
            }
            ViewBag.idCategoryType = new SelectList(db.tbCategoryTypes, "idCategoryType", "name", tbCategory.idCategoryType);
            TempData["speaker"] = new speaker { type = 2, title = "Error!", content = "Đã có lỗi xẩy ra...!!!" };
            return PartialView(tbCategory);
        }

        // GET: tbCategories/Edit/5
        public async Task<ActionResult> Edit(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            tbCategory tbCategory = await db.tbCategories.FindAsync(id);
            if (tbCategory == null)
            {
                return HttpNotFound();
            }
            ViewBag.idCategoryType = new SelectList(db.tbCategoryTypes, "idCategoryType", "name", tbCategory.idCategoryType);
            TempData["speaker"] = new speaker { type = 1, title = "Success!", content = "Cập nhật thành công...!!!" };

            return PartialView(tbCategory);
        }

        // POST: tbCategories/Edit/5
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        // more details see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<ActionResult> Edit([Bind(Include = "idCategory,idCategoryType,name,sort")] tbCategory tbCategory)
        {
            if (ModelState.IsValid)
            {
                db.Entry(tbCategory).State = EntityState.Modified;
                await db.SaveChangesAsync();
                return RedirectToAction("Index");
            }
            ViewBag.idCategoryType = new SelectList(db.tbCategoryTypes, "idCategoryType", "name", tbCategory.idCategoryType);
            return View(tbCategory);
        }

        // GET: tbCategories/Delete/5
        public async Task<ActionResult> Delete(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            tbCategory tbCategory = await db.tbCategories.FindAsync(id);
            if (tbCategory == null)
            {
                return HttpNotFound();
            }

            return View(tbCategory);
        }

        // POST: tbCategories/Delete/5
        [HttpPost, ActionName("Delete")]
        //[ValidateAntiForgeryToken]
        public async Task<ActionResult> DeleteConfirmed(int[] ids)
        {
            foreach (var id in ids)
            {
                tbCategory tbCategory = await db.tbCategories.FindAsync(id);
                db.tbCategories.Remove(tbCategory);
            }
            await db.SaveChangesAsync();
            TempData["speaker"] = new speaker { type = 1, title = "Success!", content = "Xóa thành công " + ids.Count() + " dòng dữ liệu...!!!" };
            return Json("Deleted successfully!");
            //return RedirectToAction("Index");
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }
    }
}
